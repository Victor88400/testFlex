{
	"info": {
		"_postman_id": "46f9a1e3-5777-4a6e-b424-c3463446bb78",
		"name": "CredentialAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6330579"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "FindAndDeleteExistingTestCredentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json())\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var arr = jsonData.data.credentials.items;\r",
									"\r",
									"host = pm.environment.get(\"FLEXDEPLOY_SERVER_HOSTNAME\");\r",
									"port = pm.environment.get(\"FLEXDEPLOY_SERVER_PORT\");\r",
									"\r",
									"for (let i = 0; i < arr.length; i++) {\r",
									"    var credentialObject = arr[i];\r",
									"    var credentialId = credentialObject['credentialId'];\r",
									"\r",
									"    if (credentialId) {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://' + host + ':' + port + '/flexdeploy/rest/v2/graphql',\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Accept': '*/*',\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': request.headers[\"authorization\"]\r",
									"            },\r",
									"            body: JSON.stringify({\r",
									"                query: 'mutation {deleteCredential(id: ' + credentialId + ') }'\r",
									"            })\r",
									"        }, function (err, res) {\r",
									"            console.log(res);\r",
									"        });\r",
									"    }\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query credentials ($where: [WhereInput]) {\r\n    credentials (where: $where) {\r\n        hasMore\r\n        items {\r\n            credentialId\r\n        }\r\n        next\r\n    }\r\n}",
								"variables": "{\r\n  \"where\": {\r\n    \"field\": \"credentialName\",\r\n    \"type\": \"inci\",\r\n    \"value\": \"Postman\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLocalCredentialStoreAndInputDefDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var localStoreId = jsonData.data.credentialStores.items[0].credentialStoreId;\r",
									"var localStoreInputDefId = jsonData.data.credentialStoreInputDefs.items[0].credentialStoreInputDefId;\r",
									"\r",
									"pm.collectionVariables.set(\"localStoreId\", localStoreId);\r",
									"pm.collectionVariables.set(\"localStoreInputDefId\", localStoreInputDefId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query credentialStores ($Store: [WhereInput], $StoreInputDef: [WhereInput]) {\n    credentialStores (where: $Store) {\n        hasMore\n        items {\n            credentialStoreDefId\n            credentialStoreId\n            credentialStoreName\n        }\n        next\n    }\n\n    credentialStoreInputDefs (where: $StoreInputDef) {\n        hasMore\n        items {\n            credentialStoreDefId\n            inputName\n            credentialStoreInputDefId\n        }\n        next\n    }\n}",
								"variables": "{ \n    \"Store\":{\n        \"field\": \"credentialStoreName\",\n        \"type\": \"eq\",\n        \"value\": \"Local\"\n        },\n    \"StoreInputDef\":{\n        \"field\": \"inputName\",\n        \"type\": \"eq\",\n        \"value\": \"FDCS_LOCAL_VAULT_SECRET_TEXT\"\n        }\n}"
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "CreateCredentialGraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var credentialData = jsonData.data.createCredential;\r",
									"pm.collectionVariables.set(\"credentialId1\", credentialData['credentialId']);\r",
									"pm.collectionVariables.set(\"credentialInputId1\", credentialData.credentialInputs[0]['credentialInputId']);\r",
									"\r",
									"pm.test(\"Check credentialName is correct\", function () {\r",
									"    pm.expect(credentialData.credentialName).to.eql(\"Postman Credential Test GraphQL 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialScope is correct\", function () {\r",
									"    pm.expect(credentialData.credentialScope).to.eql(\"INST\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credential versionNumber is 1\", function () {\r",
									"    pm.expect(credentialData.versionNumber).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Check createdBy is correct\", function () {\r",
									"    pm.expect(credentialData.createdBy).to.eql(pm.environment.get(\"ADMIN_USERNAME\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check updatedBy is correct\", function () {\r",
									"    pm.expect(credentialData.updatedBy).to.eql(pm.environment.get(\"ADMIN_USERNAME\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialStoreId is correct\", function () {\r",
									"    pm.expect(credentialData.credentialStoreId).to.eql(pm.collectionVariables.get(\"localStoreId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialInput versionNumber is 1\", function () {\r",
									"    pm.expect(credentialData.credentialInputs[0].versionNumber).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialStoreInputDefId is correct\", function () {\r",
									"    pm.expect(credentialData.credentialInputs[0].credentialStoreInputDefId).to.eql(pm.collectionVariables.get(\"localStoreInputDefId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createCredential {\r\n    createCredential (input:  {\r\n        credentialName:  \"Postman Credential Test GraphQL 1\",\r\n        credentialScope: INST,\r\n        credentialStoreId: {{localStoreId}},\r\n        credentialInputs: [{\r\n            inputValue: \"TestPassword1\",\r\n            credentialStoreInputDefId: {{localStoreInputDefId}}\r\n        }]\r\n    }) {\r\n        credentialName\r\n        credentialId\r\n        credentialScope\r\n        credentialStoreId\r\n        versionNumber\r\n        createdBy\r\n        updatedBy\r\n        credentialInputs {\r\n            versionNumber\r\n            credentialInputId\r\n            credentialStoreInputDefId\r\n        }\r\n    }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateCredentialREST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"credentialId2\", jsonData.credentialId);\r",
									"pm.collectionVariables.set(\"credentialInputId2\", jsonData.credentialInputs[0].credentialInputId);\r",
									"\r",
									"pm.test(\"Check credentialName is correct\", function () {\r",
									"    pm.expect(jsonData.credentialName).to.eql(\"Postman Credential Test REST 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialScope is correct\", function () {\r",
									"    pm.expect(jsonData.credentialScope).to.eql(\"ENVINST\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credential versionNumber is 1\", function () {\r",
									"    pm.expect(jsonData.versionNumber).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Check createdBy is correct\", function () {\r",
									"    pm.expect(jsonData.createdBy).to.eql(pm.environment.get(\"ADMIN_USERNAME\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check updatedBy is correct\", function () {\r",
									"    pm.expect(jsonData.updatedBy).to.eql(pm.environment.get(\"ADMIN_USERNAME\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialStoreId is correct\", function () {\r",
									"    pm.expect(jsonData.credentialStoreId).to.eql(pm.collectionVariables.get(\"localStoreId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialInput versionNumber is 1\", function () {\r",
									"    pm.expect(jsonData.credentialInputs[0].versionNumber).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialStoreInputDefId is correct\", function () {\r",
									"    pm.expect(jsonData.credentialInputs[0].credentialStoreInputDefId).to.eql(pm.collectionVariables.get(\"localStoreInputDefId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionNumber\": 1,\r\n    \"credentialName\": \"Postman Credential Test REST 1\",\r\n    \"isActive\": true,\r\n    \"credentialScope\": \"ENVINST\",\r\n    \"credentialStoreId\": {{localStoreId}},\r\n    \"credentialInputs\": [\r\n        {\r\n            \"versionNumber\":1,\r\n            \"inputValue\": \"TestPassword\",\r\n            \"credentialStoreInputDefId\": {{localStoreInputDefId}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/administration/security/credential",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"administration",
								"security",
								"credential"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCredentialREST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CryptoJS = require(\"crypto-js\")\r",
									"var host = pm.environment.get(\"FLEXDEPLOY_SERVER_HOSTNAME\");\r",
									"var port = pm.environment.get(\"FLEXDEPLOY_SERVER_PORT\");\r",
									"var user = pm.environment.get(\"ADMIN_USERNAME\");\r",
									"var password = pm.environment.get(\"ADMIN_PASSWORD\");\r",
									"var credentialId = pm.collectionVariables.get(\"credentialId1\");\r",
									"var base64 = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(user + \":\" + password));\r",
									"var jsonData = {}\r",
									"\r",
									"pm.sendRequest({\r",
									"        url: 'http://'+host+':'+port+'/flexdeploy/rest/v2/administration/security/credential/' + credentialId,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Accept': '*/*',\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Basic ' + base64\r",
									"        },\r",
									"        body: JSON.stringify()\r",
									"    }, function (err, res) {\r",
									"        console.log(res);\r",
									"        jsonData = res.json();\r",
									"        jsonData['credentialName'] = \"Postman Credential Test GraphQL 1 Update Rename\"\r",
									"        jsonData['credentialScope'] = \"ENVINST\"\r",
									"        jsonData.credentialInputs[0]['inputValue'] = \"TestUpdatedPassword\"\r",
									"        pm.collectionVariables.set(\"credentialBody1\", JSON.stringify(jsonData))\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check credentialName is correct\", function () {\r",
									"    pm.expect(jsonData.credentialName).to.eql(\"Postman Credential Test GraphQL 1 Update Rename\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credential versionNumber is 2\", function () {\r",
									"    pm.expect(jsonData.versionNumber).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Check createdBy is correct\", function () {\r",
									"    pm.expect(jsonData.createdBy).to.eql(pm.environment.get(\"ADMIN_USERNAME\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check updatedBy is correct\", function () {\r",
									"    pm.expect(jsonData.updatedBy).to.eql(pm.environment.get(\"ADMIN_USERNAME\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialInput versionNumber is 2\", function () {\r",
									"    pm.expect(jsonData.credentialInputs[0].versionNumber).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{credentialBody1}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/administration/security/credential/{{credentialId1}}",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"administration",
								"security",
								"credential",
								"{{credentialId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchCredentialREST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check credentialName is correct\", function () {\r",
									"    pm.expect(jsonData.credentialName).to.eql(\"Postman Credential Test GraphQL 1 Patch Rename\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credential versionNumber is 3\", function () {\r",
									"    pm.expect(jsonData.versionNumber).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialInput versionNumber is 2\", function () {\r",
									"    pm.expect(jsonData.credentialInputs[0].versionNumber).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"credentialName\": \"Postman Credential Test GraphQL 1 Patch Rename\",\r\n    \"credentialStoreId\": {{localStoreId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/administration/security/credential/{{credentialId1}}",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"administration",
								"security",
								"credential",
								"{{credentialId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCredentialByIdREST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json())\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"credentialBody1\", jsonData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/administration/security/credential/{{credentialId1}}",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"administration",
								"security",
								"credential",
								"{{credentialId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchCredentialREST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json())\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object count is 2\", function () {\r",
									"    var jsonData = pm.response.json().items;\r",
									"    pm.expect(jsonData.length >= 2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/administration/security/credential?credentialStoreId={{localStoreId}}&credentialName=POSTMAN",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"administration",
								"security",
								"credential"
							],
							"query": [
								{
									"key": "credentialStoreId",
									"value": "{{localStoreId}}"
								},
								{
									"key": "credentialName",
									"value": "POSTMAN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCredentialGraphQL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check credentialName changed\", function () {\r",
									"    pm.expect(jsonData.data.updateCredential.credentialName).to.eql(\"Postman Credential Test REST 1 Update Rename\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credential versionNumber is 2\", function () {\r",
									"    pm.expect(jsonData.data.updateCredential.versionNumber).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialInput versionNumber is 2\", function () {\r",
									"    pm.expect(jsonData.data.updateCredential.credentialInputs[0].versionNumber).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    updateCredential(id: {{credentialId2}}, input: \r\n        {\r\n            credentialName: \"Postman Credential Test REST 1 Update Rename\"\r\n            credentialScope: INST\r\n            versionNumber: 1\r\n            credentialStoreId: {{localStoreId}}\r\n            credentialInputs: [{\r\n                credentialInputId: {{credentialInputId2}}\r\n                inputValue: \"TestUpdate44Password\"\r\n                credentialStoreInputDefId: {{localStoreInputDefId}}\r\n                versionNumber: 1\r\n            }]\r\n        }\r\n    ) {\r\n        credentialId\r\n        credentialName\r\n        credentialScope\r\n        versionNumber\r\n        credentialInputs {\r\n            credentialId\r\n            credentialInputId\r\n            inputValue\r\n            versionNumber\r\n        }\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchCredentialAllGraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check credentialName changed\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.credentialName).to.eql(\"Postman Credential Test REST 1 Patch Rename 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialScope changed\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.credentialScope).to.eql(\"ENVINST\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credential versionNumber is 3\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.versionNumber).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialInput versionNumber is 3\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.credentialInputs[0].versionNumber).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n    patchCredential(id: {{credentialId2}}, input: \n        {\n            credentialName: \"Postman Credential Test REST 1 Patch Rename 1\"\n            credentialScope: ENVINST\n            credentialStoreId: {{localStoreId}}\n            credentialInputs: [\n                {\n                    credentialInputId: {{credentialInputId2}}\n                    credentialStoreInputDefId: {{localStoreInputDefId}}\n                    inputValue: \"TestPatchedPassword\"\n                }\n            ]\n        }\n    ) {\n        credentialId\n        credentialName\n        credentialScope\n        versionNumber\n        credentialInputs {\n            credentialInputId\n            inputValue\n            versionNumber\n        }\n    }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchCredentialGraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check credentialName changed\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.credentialName).to.eql(\"Postman Credential Test REST 1 Patch Rename 2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialScope changed\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.credentialScope).to.eql(\"INST\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check credential versionNumber is 4\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.versionNumber).to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Check credentialInput versionNumber is 3\", function () {\r",
									"    pm.expect(jsonData.data.patchCredential.credentialInputs[0].versionNumber).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n    patchCredential(id: {{credentialId2}}, input: \n        {\n            credentialName: \"Postman Credential Test REST 1 Patch Rename 2\"\n            credentialScope: INST\n            credentialStoreId: {{localStoreId}}\n        }\n    ) {\n        credentialId\n        credentialName\n        credentialScope\n        versionNumber\n        credentialInputs {\n            credentialInputId\n            inputValue\n            versionNumber\n        }\n    }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCredentialByIdGraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\n  credentialById (id: {{credentialId2}}) {\n      credentialId\n      credentialName\n      credentialScope\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCredentialsLikeGraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object count is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.credentials.items.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query credentials ($where: [WhereInput]) {\n    credentials (where: $where) {\n        hasMore\n        items {\n            createdBy\n            createdOn\n            credentialId\n            credentialInputs {\n                createdBy\n                createdOn\n                credentialId\n                credentialInputId\n                credentialStoreInputDefId\n                inputValue\n                isEncrypted\n                updatedBy\n                updatedOn\n                versionNumber\n            }\n            credentialName\n            credentialScope\n            credentialStoreId\n            isActive\n            testConnectionType\n            testPropertyKeyDefId1\n            testPropertyKeyDefId2\n            testPropertyKeyDefId3\n            testPropertyKeyDefId4\n            testPropertyKeyDefId5\n            testValue1\n            testValue2\n            testValue3\n            testValue4\n            testValue5\n            updatedBy\n            updatedOn\n            versionNumber\n        }\n        next\n    }\n}",
								"variables": "{\n    \"where\": [\n        {\n            \"field\": \"credentialName\",\n            \"type\": \"inc\",\n            \"value\": \"Postman Credential Test\"\n        }\n    ]\n}"
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCredentialByIdGraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n    deleteCredential (id: {{credentialId2}})\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "FindAndDeleteExistingTestCredentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json())\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var arr = jsonData.data.credentials.items;\r",
									"\r",
									"host = pm.environment.get(\"FLEXDEPLOY_SERVER_HOSTNAME\");\r",
									"port = pm.environment.get(\"FLEXDEPLOY_SERVER_PORT\");\r",
									"\r",
									"for (let i = 0; i < arr.length; i++) {\r",
									"    var credentialObject = arr[i];\r",
									"    var credentialId = credentialObject['credentialId'];\r",
									"\r",
									"    if (credentialId) {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://' + host + ':' + port + '/flexdeploy/rest/v2/graphql',\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Accept': '*/*',\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': request.headers[\"authorization\"]\r",
									"            },\r",
									"            body: JSON.stringify({\r",
									"                query: 'mutation {deleteCredential(id: ' + credentialId + ') }'\r",
									"            })\r",
									"        }, function (err, res) {\r",
									"            console.log(res);\r",
									"        });\r",
									"    }\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ADMIN_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ADMIN_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query credentials ($where: [WhereInput]) {\r\n    credentials (where: $where) {\r\n        hasMore\r\n        items {\r\n            credentialId\r\n        }\r\n        next\r\n    }\r\n}",
								"variables": "{\r\n  \"where\": {\r\n    \"field\": \"credentialName\",\r\n    \"type\": \"inci\",\r\n    \"value\": \"Postman\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "http://{{FLEXDEPLOY_SERVER_HOSTNAME}}:{{FLEXDEPLOY_SERVER_PORT}}/flexdeploy/rest/v2/graphql",
							"protocol": "http",
							"host": [
								"{{FLEXDEPLOY_SERVER_HOSTNAME}}"
							],
							"port": "{{FLEXDEPLOY_SERVER_PORT}}",
							"path": [
								"flexdeploy",
								"rest",
								"v2",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localStoreId",
			"value": ""
		},
		{
			"key": "localStoreInputDefId",
			"value": ""
		},
		{
			"key": "credentialId1",
			"value": ""
		},
		{
			"key": "credentialInputId1",
			"value": ""
		},
		{
			"key": "credentialId2",
			"value": ""
		},
		{
			"key": "credentialInputId2",
			"value": ""
		},
		{
			"key": "credentialBody1",
			"value": ""
		}
	]
}